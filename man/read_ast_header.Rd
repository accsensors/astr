% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ast_header.R
\name{read_ast_header}
\alias{read_ast_header}
\title{Read and format the header data from an Access Sensor Technologies air sampler log file}
\usage{
read_ast_header(file, update_names = FALSE, tz = NA)
}
\arguments{
\item{file}{Any Access Sensor Technologies air sampler log file name.}

\item{update_names}{Option to update any deprecated variable names from log
files written using older firmware versions to the variable names used in the
current firmware version. Variable names cannot be updated for files
written using UPAS v2 firmware versions preceding rev100.}

\item{tz}{Optional: A character string specifying the tz database time zone
that should be used to display local times. Example tz database time zones
include: "America/New_York", "America/Denver", and "America/Los_Angeles".
For additional information, see: \url{https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}

If the \code{tz} parameter is not specified, local times will be displayed using
the time zone associated with the GPSUTCOffset in the log file.

Note that, in the unlikely event that your local time zone is
"Australia/Lord_Howe," you will need to specify this time zone using the tz
parameter to ensure that your local times are displayed correctly.}
}
\value{
A data frame with a single row of header data that are formatted and ready for analysis.
}
\description{
\code{read_ast_header()} reads in the header data from a log file, transposes the
data into a wide format, and applies device-specific formatting to the
columns of the resulting data frame. This function sets the proper data type
for each variable, adds a column to specify the AST sampler type, adds
columns to describe the codes associated with the ShutdownMode and
PMSensorInterval variables, and can also be directed to update deprecated
variable names to the current variable names.

Use this function in conjuction with \code{\link[base:lapply]{base::lapply()}} or
\code{\link[purrr:map]{purrr::map()}} to read in header data from any number of log files
and combine those data into a single data frame that contains a unique row
for each file.
}
\details{
If \code{update_names = TRUE}, and deprecated parameter names in the log file
will be updated to the current names:
\tabular{ll}{
\strong{Deprecated name}  \tab \strong{Current name} \cr
PowerCycles               \tab LifetimeSampleCount   \cr
CumulativeSamplingTime    \tab LifetimeSampleRuntime \cr
VolumetricFlowRate        \tab FlowRateSetpoint      \cr
DutyCycle                 \tab FlowDutyCycle         \cr
StartDateTime             \tab StartDateTimeUTC      \cr
SampledRuntime            \tab PumpingDuration       \cr
LoggedRuntime             \tab OverallDuration       \cr
OverallFlowRateAverage    \tab OverallFlowAvgOffset  \cr
AverageVolumetricFlow     \tab PumpingFlowAvgOffset  \cr
AverageVolumetricFlowRate \tab PumpingFlowAvgOffset  \cr
PumpingFlowRateAverage    \tab PumpingFlowAvgOffset  \cr
SampledVolume             \tab SampledVolumeOffset   \cr
}

For log files collected using UPAS v2.0, the parameter "UPASlogFilename" will
be renamed to "LogFilename" regardless of whether \code{update_names = TRUE}.

The data frame returned by this function will include all variables from the
log file header. Additionally, for UPAS log files, the following columns will
be appended:
\itemize{
\item ASTSampler: A string indicating the model of the sampler, e.g., UPAS_v2
\item FirmwareRev: A numeric value indicating the firmware revision number
\item ShutdownReason: A string indicating the meaning of the ShutdownMode number
\item PMSensorOperation: A string indicating the meaning of the PMSensorInterval number (for UPAS v2.1 PLUS only)
\item UserTZ: A boolean value indicating whether the \code{tz} argument was supplied to this function
\item LocalTZ: A string indicating the timezone associated with StartDateTimeLocal and EndDateTimeLocal values
}
}
\examples{
# UPAS v2 EXAMPLES
upasv2_filename <- 'PS1771_LOG_2024-06-13T21_20_17UTC_GPSoutside_________Eng.txt'
upasv2_file <- system.file("extdata", upasv2_filename, package = "astr", mustWork = TRUE)
upasv2_header <- read_ast_header(upasv2_file, update_names=FALSE)

# Use of `update_names` with UPAS v2 log file
upasv2_header_updatednames <- read_ast_header(upasv2_file, update_names=TRUE)

# UPAS v2.1 PLUS EXAMPLES
upasv2x_filename <- 'PSP00270_LOG_2024-07-11T18_01_22UTC_PM_CO2_Map______----------.txt'
upasv2x_file <- system.file("extdata", upasv2x_filename, package = "astr", mustWork = TRUE)
upasv2x_header <- read_ast_header(upasv2x_file, update_names=FALSE)

# Diagnostic file
upasv2x_diag_filename <- 'PSP00270_LOG_2024-06-13T16_24_47UTC_DIAGNOSTIC________________.txt'
upasv2x_diag_file <- system.file("extdata", upasv2x_diag_filename, package = "astr",
                                  mustWork = TRUE)
upasv2x_diag_header <- read_ast_header(upasv2x_diag_file, update_names=FALSE)

# Use `base::lapply()` to read in multiple UPAS files and combine the data
# from those files into a single data frame with one row for each file.
# The `purrr::map()` function can also be used in place of `lapply()`.
multiple_upas_headers <- system.file("extdata", package = "astr", mustWork = TRUE) |>
    list.files(pattern="^PS.*.txt$", full.names = TRUE) \%>\%
    lapply(read_ast_header, update_names = TRUE) \%>\%
    dplyr::bind_rows()

# To change the type of device log file being read in the above example,
# change the `pattern` argument in `list.files()` as follows:
# UPAS v2: `pattern = "^PS[1-9].*.txt$"`
# UPAS v2.1 and v2.1 PLUS: `pattern = "^PSP.*.txt$"`
# HHB v2: `pattern = "^HHB.*.csv$"`

# HHB v2 EXAMPLES
hhb_filename <- 'HHB00032_LOG_2024-07-01T18_20UTC.csv'
hhb_file <- system.file("extdata", hhb_filename, package = "astr", mustWork = TRUE)
hhb_header <- read_ast_header(hhb_file)
}
