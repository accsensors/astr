% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ast_log.R
\name{read_ast_log}
\alias{read_ast_log}
\title{Read the sample log data from an Access Sensor Technologies air sampler log file}
\usage{
read_ast_log(
  file,
  update_names = FALSE,
  tz = NA,
  cols_keep = c(),
  cols_drop = c(),
  shiny = FALSE
)
}
\arguments{
\item{file}{Any Access Sensor Technologies air sampler log file name.}

\item{update_names}{Option to update any deprecated variable names from log files recorded using older firmware versions to the variable names used in the current firmware version.

For samples collected using UPAS v2.1 PLUS firmware versions preceding revXXX,
the column name "AceelComplianceHrs" will be updated to "AccelComplianceHrs".

For samples collected using the UPAS v2, the old names shown on the left will
be updated to the names shown on the right:
VolumetricFlowRate -> PumpingFlowRate
\itemize{
\item AtmoRho          -> AtmoDensity
\item FdPdP            -> FilterDP
\item PumpT            -> AtmoT
\item PumpRH           -> AtmoRH
\item PCBT             -> PCB1T
\item PumpP            -> PCB2P
\item PCBP             -> AtmoP
\item GPShdop          -> GPShDOP
\item BFGvolt          -> BattVolt
}

For samples collected specifically using UPAS v2 firmware rev100, the old
names shown on the left will be updated to the names shown on the right:
\itemize{
\item UTCDateTime     -> DateTimeUTC
\item VolFlow         -> VolumetricFlowRate
\item UPASLogFilename -> LogFilename
}

Variable names cannot be updated for log files written using UPAS v2 firmware
versions preceding rev100.}

\item{tz}{Optional: A character string specifying the tz database time zone that should be used to display local times.

Example tz database time zones include: "America/New_York", "America/Denver", and "America/Los_Angeles".
For additional information, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

If your GPSUTCOffset is a whole number of hours, this function will be able
to automatically convert the DateTimeLocal variable in the sample log to a
POSIXct object displayed in the local time zone, without this tz parameter
being specified.  If your GPSUTCOffset is not a whole number of hours, it's
better to specify the local time zone as a character string here.}

\item{cols_keep}{Optional: Provide a character vector specifying the names of a subset of sample log columns to keep.}

\item{cols_drop}{Optional: Provide a character vector specifying the names of a subset of sample log columns to remove.

Column selection will occur in the same order in which the function arguments are specified above.
In other words, the columns specified in cols_keep will be selected first.
If the cols_keep argument is not specified, all columns will be kept.  Then,
The columns specified in cols_drop will be dropped.  If the cols_drop
argument is not specified, no columns will be dropped.}

\item{shiny}{Option to make TRUE if using function with AST shiny app.}
}
\value{
A data frame of of sample log data that are formatted and ready for analysis.
This data frame will contain one row for each timestamp in the sample log.
Columns with key header data will be appended to the sample log columns to
aid in identification and analysis of unique samples.
}
\description{
\code{read_ast_log} reads in the sample log data from a log file and applies
device-specific formatting to the columns of the resulting data frame.
It sets the proper data type for each variable and adds columns that aid in
identifying unique log files when data from multiple sample logs have been
combined into a single data frame.

Use this function in conjuction with \link{lapply} or \link[purrr:map]{purrr::map} to read in log data
from any number of log files and combine them into a single data frame
}
\examples{
# UPASv2 EXAMPLES
upasv2_filename <- 'PS1771_LOG_2024-06-13T21_20_17UTC_GPSoutside_________Eng.txt'
upasv2_file <- system.file("extdata", upasv2_filename, package = "astr", mustWork = TRUE)
upasv2_log <- read_ast_log(upasv2_file, update_names=FALSE)

# Use of update_names with UPASv2 log file
upasv2_log_updatednames <- read_ast_log(upasv2_file, update_names=TRUE)

# UPASv2x EXAMPLES
upasv2x_filename <- 'PSP00270_LOG_2024-06-25T21_37_48UTC_GPS-in-out______----------.txt'
upasv2x_file <- system.file("extdata", upasv2x_filename, package = "astr", mustWork = TRUE)
upasv2x_log <- read_ast_log(upasv2x_file, update_names=FALSE)

# Use of cols_drop, cols_keep, and tz  with a UPASv2x log file
upasv2x_log_colsdrop <- read_ast_log(upasv2x_file,
                cols_drop = c("DateTimeLocal", "AtmoT", "AtmoP", "AtmoRH"))
upasv2x_log_colskeep <- read_ast_log(upasv2x_file, tz="America/New_York",
                cols_keep = c("SampleTime", "DateTimeUTC", "DateTimeLocal",
                               "LocalTZ",  "UserTZ", "AtmoT", "AtmoP", "AtmoRH"))

# GPS Disabled file
upasv2x_noGPS_filename <- 'PSP00270_LOG_2024-06-14T18_54_44UTC_NoGPS___________----------.txt'
upasv2x_noGPS_file <- system.file("extdata", upasv2x_noGPS_filename, package = "astr",
                                   mustWork = TRUE)
upasv2x_noGPS_log <- read_ast_log(upasv2x_noGPS_file, update_names=FALSE)

# Diagnostic file
upasv2x_diag_filename <- 'PSP00270_LOG_2024-06-13T16_24_47UTC_DIAGNOSTIC________________.txt'
upasv2x_diag_file <- system.file("extdata", upasv2x_diag_filename, package = "astr",
                                  mustWork = TRUE)
upasv2x_diag_log <- read_ast_log(upasv2x_diag_file, update_names=FALSE)

# Read in multiple UPAS files at once to a single data frame using lapply.
# The map() function from the purrr library can also be used in place of lapply.
multiple_upas_logs <- list.files(path = "inst/extdata", pattern="^PS.*.txt$",
                                full.names = TRUE) \%>\%
        lapply(read_ast_log, update_names = TRUE) \%>\%
        dplyr::bind_rows()

# HHB EXAMPLES
hhb_filename <- 'HHB00032_LOG_2024-07-01T18_20UTC.csv'
hhb_file <- system.file("extdata", hhb_filename, package = "astr", mustWork = TRUE)
hhb_log <- read_ast_log(hhb_file)
}
